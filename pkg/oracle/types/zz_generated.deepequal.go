//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package types

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OracleIP) DeepEqual(other *OracleIP) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.IP != other.IP {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OracleInterface) DeepEqual(other *OracleInterface) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.IsPrimary != other.IsPrimary {
		return false
	}
	if in.IP != other.IP {
		return false
	}
	if ((in.SecondaryIPs != nil) && (other.SecondaryIPs != nil)) || ((in.SecondaryIPs == nil) != (other.SecondaryIPs == nil)) {
		in, other := &in.SecondaryIPs, &other.SecondaryIPs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	if in.MAC != other.MAC {
		return false
	}
	if in.InstanceID != other.InstanceID {
		return false
	}
	if !in.VCN.DeepEqual(&other.VCN) {
		return false
	}

	if in.SubnetID != other.SubnetID {
		return false
	}
	if in.SubnetCIDR != other.SubnetCIDR {
		return false
	}
	if in.AvailabilityDomain != other.AvailabilityDomain {
		return false
	}
	if ((in.SecurityGroupIds != nil) && (other.SecurityGroupIds != nil)) || ((in.SecurityGroupIds == nil) != (other.SecurityGroupIds == nil)) {
		in, other := &in.SecurityGroupIds, &other.SecurityGroupIds
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OracleSpec) DeepEqual(other *OracleSpec) bool {
	if other == nil {
		return false
	}

	if in.AvailabilityDomain != other.AvailabilityDomain {
		return false
	}
	if ((in.SubnetTags != nil) && (other.SubnetTags != nil)) || ((in.SubnetTags == nil) != (other.SubnetTags == nil)) {
		in, other := &in.SubnetTags, &other.SubnetTags
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	if ((in.SecurityGroupIds != nil) && (other.SecurityGroupIds != nil)) || ((in.SecurityGroupIds == nil) != (other.SecurityGroupIds == nil)) {
		in, other := &in.SecurityGroupIds, &other.SecurityGroupIds
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if in.InstanceShape != other.InstanceShape {
		return false
	}
	if in.MaxVnicAttachments != other.MaxVnicAttachments {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OracleStatus) DeepEqual(other *OracleStatus) bool {
	if other == nil {
		return false
	}

	if ((in.Interfaces != nil) && (other.Interfaces != nil)) || ((in.Interfaces == nil) != (other.Interfaces == nil)) {
		in, other := &in.Interfaces, &other.Interfaces
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *OracleVCN) DeepEqual(other *OracleVCN) bool {
	if other == nil {
		return false
	}

	if in.PrimaryCIDR != other.PrimaryCIDR {
		return false
	}
	if ((in.SecondaryCIDRs != nil) && (other.SecondaryCIDRs != nil)) || ((in.SecondaryCIDRs == nil) != (other.SecondaryCIDRs == nil)) {
		in, other := &in.SecondaryCIDRs, &other.SecondaryCIDRs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	return true
}
