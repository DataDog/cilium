// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dnsproxy.proto

package dnsproxy

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FQDNMapping struct {
	FQDN                 string   `protobuf:"bytes,1,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	IPS                  [][]byte `protobuf:"bytes,2,rep,name=IPS,proto3" json:"IPS,omitempty"`
	TTL                  int32    `protobuf:"varint,3,opt,name=TTL,proto3" json:"TTL,omitempty"`
	ClientIp             []byte   `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FQDNMapping) Reset()         { *m = FQDNMapping{} }
func (m *FQDNMapping) String() string { return proto.CompactTextString(m) }
func (*FQDNMapping) ProtoMessage()    {}
func (*FQDNMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_d100dcb0f2375fa0, []int{0}
}

func (m *FQDNMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FQDNMapping.Unmarshal(m, b)
}
func (m *FQDNMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FQDNMapping.Marshal(b, m, deterministic)
}
func (m *FQDNMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FQDNMapping.Merge(m, src)
}
func (m *FQDNMapping) XXX_Size() int {
	return xxx_messageInfo_FQDNMapping.Size(m)
}
func (m *FQDNMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_FQDNMapping.DiscardUnknown(m)
}

var xxx_messageInfo_FQDNMapping proto.InternalMessageInfo

func (m *FQDNMapping) GetFQDN() string {
	if m != nil {
		return m.FQDN
	}
	return ""
}

func (m *FQDNMapping) GetIPS() [][]byte {
	if m != nil {
		return m.IPS
	}
	return nil
}

func (m *FQDNMapping) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *FQDNMapping) GetClientIp() []byte {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

type Result struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_d100dcb0f2375fa0, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*FQDNMapping)(nil), "dnsproxy.FQDNMapping")
	proto.RegisterType((*Result)(nil), "dnsproxy.Result")
}

func init() { proto.RegisterFile("dnsproxy.proto", fileDescriptor_d100dcb0f2375fa0) }

var fileDescriptor_d100dcb0f2375fa0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xc9, 0x2b, 0x2e,
	0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x92,
	0xb8, 0xb8, 0xdd, 0x02, 0x5d, 0xfc, 0x7c, 0x13, 0x0b, 0x0a, 0x32, 0xf3, 0xd2, 0x85, 0x84, 0xb8,
	0x58, 0x40, 0x5c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x80, 0x8b, 0xd9,
	0x33, 0x20, 0x58, 0x82, 0x49, 0x81, 0x59, 0x83, 0x27, 0x08, 0xc4, 0x04, 0x89, 0x84, 0x84, 0xf8,
	0x48, 0x30, 0x2b, 0x30, 0x6a, 0xb0, 0x06, 0x81, 0x98, 0x42, 0xd2, 0x5c, 0x9c, 0xc9, 0x39, 0x99,
	0xa9, 0x79, 0x25, 0xf1, 0x99, 0x05, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x1c, 0x10, 0x01,
	0xcf, 0x02, 0x25, 0x25, 0x2e, 0xb6, 0xa0, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x21, 0x09, 0x2e, 0xf6,
	0xe2, 0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62, 0xb0, 0x0d, 0x1c, 0x41, 0x30, 0xae, 0x91, 0x1f, 0x17,
	0xaf, 0x5b, 0xa0, 0x9f, 0x8b, 0x73, 0x7e, 0x4e, 0x4e, 0x6a, 0x72, 0x49, 0x7e, 0x91, 0x90, 0x2d,
	0x17, 0x5f, 0x68, 0x41, 0x4a, 0x62, 0x49, 0x2a, 0xd4, 0x69, 0xc5, 0x42, 0xa2, 0x7a, 0x70, 0x5f,
	0x20, 0x39, 0x59, 0x4a, 0x00, 0x21, 0x0c, 0xb1, 0x45, 0x89, 0x41, 0x83, 0xd1, 0x49, 0x2b, 0x4a,
	0x23, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x39, 0x33, 0x27, 0xb3,
	0x14, 0x4e, 0x25, 0x16, 0x64, 0xea, 0x97, 0x19, 0xea, 0xc3, 0xb4, 0x25, 0xb1, 0x81, 0x03, 0xc5,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x40, 0x78, 0x06, 0x73, 0x26, 0x01, 0x00, 0x00,
}
