// Copyright 2023 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: dnsproxy.proto

package dnsproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FQNDCollector_UpdateMappings_FullMethodName = "/dnsproxy.FQNDCollector/UpdateMappings"
)

// FQNDCollectorClient is the client API for FQNDCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FQNDCollectorClient interface {
	// Accepts a stream of FQDNMapping
	UpdateMappings(ctx context.Context, opts ...grpc.CallOption) (FQNDCollector_UpdateMappingsClient, error)
}

type fQNDCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewFQNDCollectorClient(cc grpc.ClientConnInterface) FQNDCollectorClient {
	return &fQNDCollectorClient{cc}
}

func (c *fQNDCollectorClient) UpdateMappings(ctx context.Context, opts ...grpc.CallOption) (FQNDCollector_UpdateMappingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &FQNDCollector_ServiceDesc.Streams[0], FQNDCollector_UpdateMappings_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fQNDCollectorUpdateMappingsClient{stream}
	return x, nil
}

type FQNDCollector_UpdateMappingsClient interface {
	Send(*FQDNMapping) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type fQNDCollectorUpdateMappingsClient struct {
	grpc.ClientStream
}

func (x *fQNDCollectorUpdateMappingsClient) Send(m *FQDNMapping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fQNDCollectorUpdateMappingsClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FQNDCollectorServer is the server API for FQNDCollector service.
// All implementations must embed UnimplementedFQNDCollectorServer
// for forward compatibility
type FQNDCollectorServer interface {
	// Accepts a stream of FQDNMapping
	UpdateMappings(FQNDCollector_UpdateMappingsServer) error
	mustEmbedUnimplementedFQNDCollectorServer()
}

// UnimplementedFQNDCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedFQNDCollectorServer struct {
}

func (UnimplementedFQNDCollectorServer) UpdateMappings(FQNDCollector_UpdateMappingsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMappings not implemented")
}
func (UnimplementedFQNDCollectorServer) mustEmbedUnimplementedFQNDCollectorServer() {}

// UnsafeFQNDCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FQNDCollectorServer will
// result in compilation errors.
type UnsafeFQNDCollectorServer interface {
	mustEmbedUnimplementedFQNDCollectorServer()
}

func RegisterFQNDCollectorServer(s grpc.ServiceRegistrar, srv FQNDCollectorServer) {
	s.RegisterService(&FQNDCollector_ServiceDesc, srv)
}

func _FQNDCollector_UpdateMappings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FQNDCollectorServer).UpdateMappings(&fQNDCollectorUpdateMappingsServer{stream})
}

type FQNDCollector_UpdateMappingsServer interface {
	SendAndClose(*Result) error
	Recv() (*FQDNMapping, error)
	grpc.ServerStream
}

type fQNDCollectorUpdateMappingsServer struct {
	grpc.ServerStream
}

func (x *fQNDCollectorUpdateMappingsServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fQNDCollectorUpdateMappingsServer) Recv() (*FQDNMapping, error) {
	m := new(FQDNMapping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FQNDCollector_ServiceDesc is the grpc.ServiceDesc for FQNDCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FQNDCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnsproxy.FQNDCollector",
	HandlerType: (*FQNDCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateMappings",
			Handler:       _FQNDCollector_UpdateMappings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dnsproxy.proto",
}
